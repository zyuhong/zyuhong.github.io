[{"title":"跟小马哥学习SpringBoot","date":"2017-08-12T06:36:23.000Z","path":"2017/08/12/跟小马哥学习SpringBoot/","text":"这里推荐一个不错的Spring Boot系列讲座，讲师简介如下： 小马哥，阿里巴巴技术专家，从事十余年Java EE 开发，国内微服务技术讲师。目前主要负责微服务技术推广、架构设计、基础设施、迁移等。重点关注云计算、微服务以及软件架构等领域。获得过 SUN Java（SCJP、SCWCD、SCBCD）以及 Oracle OCA 等的认证。 讲座大纲 Java 微服务实践 - Spring Boot 系列（一）初体验 Java 微服务实践 - Spring Boot 系列（二） Web篇（上） Java 微服务实践 - Spring Boot 系列（三）Web篇（中） Java 微服务实践 - Spring Boot 系列（四）Web篇（下） Java 微服务实践 - Spring Boot 系列（五）嵌入式Web容器 Java 微服务实践 - Spring Boot 系列（六）数据库 JDBC Java 微服务实践 - Spring Boot 系列（七）MyBatis Java 微服务实践 - Spring Boot 系列（八）JPA Java 微服务实践 - Spring Boot 系列（九）NoSQL Java 微服务实践 - Spring Boot 系列（十）缓存 Java 微服务实践 - Spring Boot 系列（十一）消息 Java 微服务实践 - Spring Boot 系列（十二）验证 Java 微服务实践 - Spring Boot 系列（十三）WebSocket Java 微服务实践- Spring Boot 系列（十四）WebService Java 微服务实践 - Spring Boot 系列（十五）安全 Java 微服务实践 - Spring Boot 系列（十六）日志 Java 微服务实践 - Spring Boot 系列（十七）监管 Java 微服务实践 - Spring Boot 系列（十八）配置 Java 微服务实践 - Spring Boot 系列（十九）测试 Java 微服务实践 - Spring Boot 系列（二十）自定义启动器 原文链接：https://segmentfault.com/u/mercyblitz/lives?type=started本文作者：小马哥","tags":[]},{"title":"Git常用命令记录","date":"2017-08-11T15:13:00.000Z","path":"2017/08/11/Git常用命令记录/","text":"Git常用命令记录","tags":[{"name":"git","slug":"git","permalink":"http://zyhong360.com/tags/git/"}]},{"title":"使用angular中的service和filter编写组件树","date":"2017-08-05T08:49:00.000Z","path":"2017/08/05/使用angular中的service和filter编写组件树/","text":"学习《AngularJS深度剖析与实践》总结 在我们平时的开发中，需要对某些数据进行以树的形式进行展现，比如：权限角色、菜单、嵌套评论等。这个时候我们需要使用angular进行对数据抽象，构造我们自己的组件树： 例子：我们就拿主题树作为一个例子，然后一步一步去优雅的实现它: 首先我们准备好angular的库文件，建立好相应的目录及文件，按照angular遵循的风格：约定优于配置。首先我们创建一个用于展示的目录，theme-tree1mkdir theme-tree &amp;&amp; cd $_ 2.创建需要展示的html页面文件:1touch index.html 3.创建存放项目js文件的目录:1mkdir js 4.创建存放angular项目的controller目录、service目录和filter目录:1mkdir controller &amp;&amp; mkdir service &amp;&amp; mkdir filter 5.创建angular项目的入口文件，app.js1cd js &amp;&amp; touch app.js 6.目前先不考虑UI效果部分，主要以实现功能为主，我们使用bower来安装和管理相应的js第三方库文件，如果没有安装bower工具，可以借助npm进行安装-npm install -g bower ,在我们创建的theme-tree目录下，键入如下命令安装angular库的依赖：1bower install angular --save 以上命令实行完毕后我们的目录结构如下： 7.接下来我们开始编辑js/app.js入口文件：1angular.module(&apos;myApp&apos;, []); 8.接下来我们开始编写控制器文件js/controller/index.client.controller.js:1234567891011121314151617181920212223242526272829303132333435363738394041angular.module(&apos;myApp&apos;).controller(&quot;ThreedTreeCtrl&quot;,function ThreedTreeCtrl(tree) &#123; var vm = this; vm.items = [&#123; id: 1, title: &quot;Java&quot;, poster: &quot;Messi&quot;, dateCreated: &quot;2012-02-19T00:00:00&quot;, items: [&#123; id: 11, title: &apos;Spring&apos;, poster: &apos;John&apos;, dateCreated: &quot;2012-02-19T00:00:00&quot;, items: [ &#123; id: 111, title: &apos;AOP&apos;, poster: &apos;Mike&apos;, dateCreated: &quot;2016-02-19T00:00:00&quot;, items: [ &#123; id: 1111, title: &apos;IOC&apos;, poster: &apos;Jack&apos;] &#125; ] &#125;, &#123; id: 2, title: &quot;SpringBoot&quot;, poster: &quot;Lucy&quot;, dateCreated: &quot;2011-02-19T00:00:00&quot; &#125; ] &#125;, &#123; id: 2, title: &quot;JavaScript&quot;, poster: &quot;Jack&quot;, dateCreated: &quot;2012-02-19T00:00:00&quot;, &#125; ];&#125;); 以上内容很简单，构建了一个ThreedTreeCtrl控制器，里面嵌套了一些随意的数据，主要是为了模拟父子关系； 9.接下来我们编辑js/service/index.client.service.js文件，用于对数据进行附加相应的行为。思考一下，当我们有了这样一组数据后，我们要为它添加什么方法和属性，首先应该添加父节点是否折叠，此属性主要是为了在界面显示的时候展开或折叠子节点数据。当展开的时候我们使用“-”表示，折叠的时候我们使用”+”表示，当折叠时单击节点应该展开子节点，当展开的时候，单击子节点应该折叠父节点；将新增的属性和方法为了减小和原始数据冲突，并且这些数据通过$http或者$resource提交给服务器，它们所调用的angular.toJso()函数会忽略所有以$开头的属性，这样我们扩展的属性就不会被提交到服务端了。还有一个方便的是，当我们看到数据上有”$”开头的属性就是扩展的属性。接下来我们实现它：123456789101112131415161718192021222324252627282930angular.module(&apos;myApp&apos;).service(&apos;tree&apos;,function Tree()&#123; var self = this; //为每一项节点添加属性和方法 var enhanceItem = function(item,childrenName)&#123; item.$hasChildren = function()&#123; var subItems = this[childrenName]; return angular.isArray(subItems) &amp;&amp; subItems.length; &#125;; item.$foldToggle = function()&#123; this.$folded = !this.$folded; &#125;; item.$isFolded = function()&#123; return this.$folded; &#125;; &#125;; //对传进来的数据进行强化 this.enhance = function(items,childrenName)&#123; if(angular.isUndefined(childrenName))&#123; childrenName = &quot;items&quot;; &#125; angular.forEach(items,function(item)&#123; enhanceItem(item,childrenName); //如果有子节点则递归处理 self.enhance(item[childrenName],childrenName); &#125;); console.log(items); return items; &#125;;&#125;); 10.这样我们完成了对数据进行强化，此时我们如果直接在controller调用service的enhance 方法，将服务端返回的json数据进行加强，为他们添加的相应的属性和方法，然后在页面进行展示调用就可以了，但是这样感觉比较脏，不干净，我们不在contrller直接调用service里面的enhance 方法，我们可以创建一个过滤器来对数据进行添加过滤的功能，接下来我们开始编辑filter/index.client.filter.js: 123456angular.module(&apos;myApp&apos;).filter(&apos;tree&apos;,function(tree)&#123; return function(items,childrenName)&#123; tree.enhance(items,childrenName); return items; &#125;;&#125;); 11.接下来编写html文件，开始对主题树进行展现并且引入相关文件：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;ThreedTreeCtrl as vm&quot;&gt; &lt;ul ng-if=&quot;vm.items&quot;&gt; &lt;li ng-repeat=&quot;item1 in vm.items | tree&quot;&gt; &lt;div ng-click=&quot;item1.$foldToggle()&quot;&gt; &lt;span ng-if=&quot;item1.$hasChildren()&quot;&gt; &lt;span ng-if=&quot;!item1.$isFolded()&quot;&gt;-&lt;/span&gt; &lt;span ng-if=&quot;item1.$isFolded()&quot;&gt;+&lt;/span&gt; &lt;/span&gt; &#123;&#123; item1.title &#125;&#125; &lt;/div&gt; &lt;ul ng-if=&quot;item1.$hasChildren() &amp;&amp; !item1.$isFolded()&quot;&gt; &lt;li ng-repeat=&quot;item2 in item1.items&quot;&gt; &lt;div ng-click=&quot;item2.$foldToggle()&quot;&gt; &lt;span ng-if=&quot;item2.$hasChildren()&quot;&gt; &lt;span ng-if=&quot;!item2.$isFolded()&quot;&gt;-&lt;/span&gt; &lt;span ng-if=&quot;item2.$isFolded()&quot;&gt;+&lt;/span&gt; &lt;/span&gt; &#123;&#123; item2.title &#125;&#125; &lt;/div&gt; &lt;ul ng-if=&quot;item2.$hasChildren() &amp;&amp; !item2.$isFolded()&quot;&gt; &lt;li ng-repeat=&quot;item3 in item2.items&quot;&gt; &#123;&#123; item3.title &#125;&#125; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script src=&quot;bower_components/angular/angular.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/app.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/controller/index.client.controller.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/service/index.client.service.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/filters/index.client.filter.js&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 此时我们便完成了对主题树功能的实现，在index.html文件中，我们只展示了两层嵌套关系以作为示例，根据自己的业务场景进行扩展。以上实现还不够优雅，等待以后需要将主题递归树封装为指令，最后附上github地址:https://github.com/strongant/angularjs源码位于此仓库下的angular-tree目录，欢迎提出issue。","tags":[{"name":"angularjs","slug":"angularjs","permalink":"http://zyhong360.com/tags/angularjs/"}]}]